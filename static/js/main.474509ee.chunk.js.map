{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","utils/getUserById.ts","utils/getTodoId.ts","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUserById","userId","users","find","getTodoId","Math","max","TodoForm","addNewTodo","useState","todoTitle","setTodoTitle","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","todoUserId","setTodoUserId","action","method","onSubmit","event","preventDefault","trimTitle","trim","type","value","onChange","target","placeholder","disabled","usersFromServer","todosWithUser","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.474509ee.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo:React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TodoWithUser } from '../../react-app-env';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoWithUser } from '../../react-app-env';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../react-app-env';\n\nexport const getUserById = (userId: number, users: User[]) => {\n  const foundUser = users.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n","import { TodoWithUser } from '../react-app-env';\n\nexport const getTodoId = (todos: TodoWithUser[]) => {\n  const id = Math.max(...todos.map(todo => todo.id));\n\n  return id + 1;\n};\n","import React, { useState } from 'react';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  addNewTodo: (todoTitle: string, todoUserId: number) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ addNewTodo }) => {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n  const [todoUserId, setTodoUserId] = useState(0);\n\n  const resetForm = () => {\n    setTodoTitle('');\n    setTodoUserId(0);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimTitle = todoTitle.trim();\n\n    setHasTitleError(!trimTitle);\n    setHasUserIdError(!todoUserId);\n\n    if (!trimTitle || !todoUserId) {\n      return;\n    }\n\n    if (!hasTitleError && !hasUserIdError) {\n      addNewTodo(todoTitle, todoUserId);\n      resetForm();\n    }\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodoUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  return (\n    <form\n      action=\"/api/users\"\n      method=\"POST\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={todoTitle}\n          onChange={handleInput}\n          placeholder=\"Enter a title\"\n        />\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={todoUserId}\n          onChange={handleSelect}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {usersFromServer.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoWithUser } from './react-app-env';\nimport { getUserById } from './utils/getUserById';\nimport { getTodoId } from './utils/getTodoId';\nimport { TodoForm } from './components/TodoForm';\n\nconst todosWithUser: TodoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId, usersFromServer),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(todosWithUser);\n\n  const addNewTodo = (todoTitle: string, todoUserId: number) => {\n    const newTodo: TodoWithUser = {\n      id: getTodoId(todos),\n      title: todoTitle,\n      completed: false,\n      userId: todoUserId,\n      user: getUserById(todoUserId, usersFromServer),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm addNewTodo={addNewTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}